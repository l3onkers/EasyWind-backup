name: üß™ CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
    paths-ignore:
      - '*.md'
      - 'docs/**'
  pull_request:
    branches: [ main ]
    paths-ignore:
      - '*.md'
      - 'docs/**'
  release:
    types: [published]

jobs:
  # Job 1: Validaci√≥n b√°sica de archivos
  validate:
    name: üìã Validate Files
    runs-on: windows-latest
    
    steps:
    - name: üì• Checkout code
      uses: actions/checkout@v4
      
    - name: üîç Check required files
      run: |
        $requiredFiles = @(
          "EasyWInd-backup.bat",
          "config.ini", 
          "setup.bat",
          "README.md",
          "EXAMPLES.md"
        )
        
        foreach ($file in $requiredFiles) {
          if (-not (Test-Path $file)) {
            Write-Error "Required file missing: $file"
            exit 1
          }
          Write-Host "‚úÖ Found: $file" -ForegroundColor Green
        }
      shell: powershell
      
    - name: üîç Validate config.ini structure
      run: |
        $configContent = Get-Content "config.ini" -Raw
        $requiredSections = @(
          "[BACKUP_CONFIG]",
          "backup_server=",
          "log_base_path=",
          "cleanup_enabled=",
          "mirror_mode="
        )
        
        foreach ($section in $requiredSections) {
          if ($configContent -notlike "*$section*") {
            Write-Error "Config validation failed: Missing $section"
            exit 1
          }
          Write-Host "‚úÖ Config contains: $section" -ForegroundColor Green
        }
      shell: powershell

  # Job 2: Test de sintaxis de batch scripts
  syntax-check:
    name: üîß Syntax Check
    runs-on: windows-latest
    needs: validate
    
    steps:
    - name: üì• Checkout code
      uses: actions/checkout@v4
      
    - name: üîç Check Batch Script Syntax
      run: |
        $batchFiles = Get-ChildItem -Filter "*.bat" -Recurse
        
        foreach ($file in $batchFiles) {
          Write-Host "Checking syntax: $($file.Name)" -ForegroundColor Blue
          
          # Check for common syntax issues
          $content = Get-Content $file.FullName -Raw
          
          # Check for unmatched parentheses
          $openParens = ($content -split '\(' | Measure-Object).Count - 1
          $closeParens = ($content -split '\)' | Measure-Object).Count - 1
          
          if ($openParens -ne $closeParens) {
            Write-Error "Unmatched parentheses in $($file.Name)"
            exit 1
          }
          
          # Check for CRLF line endings
          if ($content -match "`n" -and $content -notmatch "`r`n") {
            Write-Warning "File $($file.Name) may have incorrect line endings"
          }
          
          Write-Host "‚úÖ Syntax OK: $($file.Name)" -ForegroundColor Green
        }
      shell: powershell

  # Job 3: Test funcional b√°sico
  functional-test:
    name: üß™ Functional Tests
    runs-on: windows-latest
    needs: [validate, syntax-check]
    
    steps:
    - name: üì• Checkout code
      uses: actions/checkout@v4
      
    - name: üîß Setup test environment
      run: |
        # Create test directories
        New-Item -ItemType Directory -Path "C:\TestBackup\Source" -Force
        New-Item -ItemType Directory -Path "C:\TestBackup\Destination" -Force
        New-Item -ItemType Directory -Path "C:\TestBackup\Logs" -Force
        
        # Create test files
        "Test file content 1" | Out-File "C:\TestBackup\Source\test1.txt"
        "Test file content 2" | Out-File "C:\TestBackup\Source\test2.txt"
        
        Write-Host "‚úÖ Test environment created" -ForegroundColor Green
      shell: powershell
      
    - name: üîß Create test config
      run: |
        $testConfig = @"
        [BACKUP_CONFIG]
        backup_server=localhost
        max_retries=1
        retry_delay=1
        default_source_path=C:\TestBackup\Source
        default_destination_path=C:\TestBackup\Destination
        log_base_path=C:\TestBackup\Logs
        enable_detailed_logging=true
        cleanup_enabled=false
        cleanup_days=30
        robocopy_retries=1
        robocopy_wait=5
        mirror_mode=false
        fat_file_times=true
        network_timeout=500
        auto_disconnect=false
        network_username=
        network_password=
        network_domain=
        "@
        
        $testConfig | Out-File "config-test.ini" -Encoding UTF8
        Write-Host "‚úÖ Test config created" -ForegroundColor Green
      shell: powershell
      
    - name: üß™ Test config loading
      run: |
        # Test that the script can load configuration
        $scriptContent = Get-Content "EasyWInd-backup.bat" -Raw
        
        # Create a minimal test version that just loads config
        $testScript = @"
        @echo off
        setlocal enabledelayedexpansion
        set script_dir=%~dp0
        set config_file=%script_dir%config-test.ini
        
        if not exist "%config_file%" (
            echo ERROR: Configuration file not found
            exit /b 1
        )
        
        for /f "usebackq tokens=1,2 delims==" %%a in ("%config_file%") do (
            set "%%a=%%b"
        )
        
        echo backup_server=!backup_server!
        echo log_base_path=!log_base_path!
        echo Configuration loaded successfully
        exit /b 0
        "@
        
        $testScript | Out-File "test-config-load.bat" -Encoding ASCII
        
        # Run the test
        $result = cmd /c "test-config-load.bat"
        
        if ($LASTEXITCODE -eq 0) {
          Write-Host "‚úÖ Config loading test passed" -ForegroundColor Green
          Write-Host $result
        } else {
          Write-Error "‚ùå Config loading test failed"
          exit 1
        }
      shell: powershell
      
    - name: üßπ Cleanup test environment
      run: |
        Remove-Item "C:\TestBackup" -Recurse -Force -ErrorAction SilentlyContinue
        Remove-Item "config-test.ini" -Force -ErrorAction SilentlyContinue
        Remove-Item "test-config-load.bat" -Force -ErrorAction SilentlyContinue
        Write-Host "‚úÖ Test environment cleaned up" -ForegroundColor Green
      shell: powershell

  # Job 4: Security scan b√°sico
  security-scan:
    name: üîí Security Scan
    runs-on: windows-latest
    needs: [validate, syntax-check]
    
    steps:
    - name: üì• Checkout code
      uses: actions/checkout@v4
      
    - name: üîç Check for sensitive information
      run: |
        $sensitivePatterns = @(
          "password\s*=\s*[^=\s][^\s]*",
          "token\s*=\s*[^=\s][^\s]*",
          "secret\s*=\s*[^=\s][^\s]*",
          "192\.168\.\d+\.\d+",
          "10\.\d+\.\d+\.\d+",
          "172\.1[6-9]\.\d+\.\d+",
          "172\.2[0-9]\.\d+\.\d+",
          "172\.3[01]\.\d+\.\d+"
        )
        
        $files = Get-ChildItem -Recurse -Include "*.bat", "*.ini", "*.md" | Where-Object { $_.Name -notlike "*test*" }
        
        $found = $false
        foreach ($file in $files) {
          $content = Get-Content $file.FullName -Raw
          
          foreach ($pattern in $sensitivePatterns) {
            if ($content -match $pattern) {
              # Skip known safe examples in documentation
              if ($file.Name -like "*.md" -and ($content -match "ejemplo" -or $content -match "example")) {
                continue
              }
              
              Write-Warning "Potential sensitive information in $($file.Name): $($matches[0])"
              $found = $true
            }
          }
        }
        
        if (-not $found) {
          Write-Host "‚úÖ No sensitive information detected" -ForegroundColor Green
        }
      shell: powershell

  # Job 5: Create release assets
  release:
    name: üì¶ Create Release
    runs-on: windows-latest
    needs: [validate, syntax-check, functional-test, security-scan]
    if: github.event_name == 'release'
    
    steps:
    - name: üì• Checkout code
      uses: actions/checkout@v4
      
    - name: üì¶ Create release package
      run: |
        $version = "${{ github.event.release.tag_name }}"
        $packageName = "EasyWind-Backup-$version"
        
        # Create package directory
        New-Item -ItemType Directory -Path $packageName -Force
        
        # Copy main files
        Copy-Item "EasyWInd-backup.bat" "$packageName/"
        Copy-Item "config.ini" "$packageName/"
        Copy-Item "setup.bat" "$packageName/"
        Copy-Item "README.md" "$packageName/"
        Copy-Item "EXAMPLES.md" "$packageName/"
        Copy-Item "CONTRIBUTING.md" "$packageName/"
        Copy-Item "SECURITY.md" "$packageName/"
        
        # Create ZIP
        Compress-Archive -Path "$packageName/*" -DestinationPath "$packageName.zip"
        
        Write-Host "‚úÖ Package created: $packageName.zip" -ForegroundColor Green
      shell: powershell
      
    - name: üì§ Upload release asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ github.event.release.upload_url }}
        asset_path: ./EasyWind-Backup-${{ github.event.release.tag_name }}.zip
        asset_name: EasyWind-Backup-${{ github.event.release.tag_name }}.zip
        asset_content_type: application/zip
